//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.18444
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace BrokerService.localhost {
    using System.Runtime.Serialization;
    using System;
    
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="ShareInformation", Namespace="http://schemas.datacontract.org/2004/07/WallstreetDataService.Model")]
    [System.SerializableAttribute()]
    public partial class ShareInformation : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string FirmNameField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int NoOfSharesField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private double PricePerShareField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int PurchasingVolumeField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int SalesVolumeField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string FirmName {
            get {
                return this.FirmNameField;
            }
            set {
                if ((object.ReferenceEquals(this.FirmNameField, value) != true)) {
                    this.FirmNameField = value;
                    this.RaisePropertyChanged("FirmName");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int NoOfShares {
            get {
                return this.NoOfSharesField;
            }
            set {
                if ((this.NoOfSharesField.Equals(value) != true)) {
                    this.NoOfSharesField = value;
                    this.RaisePropertyChanged("NoOfShares");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public double PricePerShare {
            get {
                return this.PricePerShareField;
            }
            set {
                if ((this.PricePerShareField.Equals(value) != true)) {
                    this.PricePerShareField = value;
                    this.RaisePropertyChanged("PricePerShare");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int PurchasingVolume {
            get {
                return this.PurchasingVolumeField;
            }
            set {
                if ((this.PurchasingVolumeField.Equals(value) != true)) {
                    this.PurchasingVolumeField = value;
                    this.RaisePropertyChanged("PurchasingVolume");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int SalesVolume {
            get {
                return this.SalesVolumeField;
            }
            set {
                if ((this.SalesVolumeField.Equals(value) != true)) {
                    this.SalesVolumeField = value;
                    this.RaisePropertyChanged("SalesVolume");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="Order", Namespace="http://schemas.datacontract.org/2004/07/WallstreetDataService.Model")]
    [System.SerializableAttribute()]
    public partial class Order : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string IdField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string InvestorIdField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private double LimitField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int NoOfOpenSharesField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int NoOfProcessedSharesField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string ShareNameField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private BrokerService.localhost.OrderStatus StatusField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int TotalNoOfSharesField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private BrokerService.localhost.OrderType TypeField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Id {
            get {
                return this.IdField;
            }
            set {
                if ((object.ReferenceEquals(this.IdField, value) != true)) {
                    this.IdField = value;
                    this.RaisePropertyChanged("Id");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string InvestorId {
            get {
                return this.InvestorIdField;
            }
            set {
                if ((object.ReferenceEquals(this.InvestorIdField, value) != true)) {
                    this.InvestorIdField = value;
                    this.RaisePropertyChanged("InvestorId");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public double Limit {
            get {
                return this.LimitField;
            }
            set {
                if ((this.LimitField.Equals(value) != true)) {
                    this.LimitField = value;
                    this.RaisePropertyChanged("Limit");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int NoOfOpenShares {
            get {
                return this.NoOfOpenSharesField;
            }
            set {
                if ((this.NoOfOpenSharesField.Equals(value) != true)) {
                    this.NoOfOpenSharesField = value;
                    this.RaisePropertyChanged("NoOfOpenShares");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int NoOfProcessedShares {
            get {
                return this.NoOfProcessedSharesField;
            }
            set {
                if ((this.NoOfProcessedSharesField.Equals(value) != true)) {
                    this.NoOfProcessedSharesField = value;
                    this.RaisePropertyChanged("NoOfProcessedShares");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string ShareName {
            get {
                return this.ShareNameField;
            }
            set {
                if ((object.ReferenceEquals(this.ShareNameField, value) != true)) {
                    this.ShareNameField = value;
                    this.RaisePropertyChanged("ShareName");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public BrokerService.localhost.OrderStatus Status {
            get {
                return this.StatusField;
            }
            set {
                if ((this.StatusField.Equals(value) != true)) {
                    this.StatusField = value;
                    this.RaisePropertyChanged("Status");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int TotalNoOfShares {
            get {
                return this.TotalNoOfSharesField;
            }
            set {
                if ((this.TotalNoOfSharesField.Equals(value) != true)) {
                    this.TotalNoOfSharesField = value;
                    this.RaisePropertyChanged("TotalNoOfShares");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public BrokerService.localhost.OrderType Type {
            get {
                return this.TypeField;
            }
            set {
                if ((this.TypeField.Equals(value) != true)) {
                    this.TypeField = value;
                    this.RaisePropertyChanged("Type");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="OrderStatus", Namespace="http://schemas.datacontract.org/2004/07/WallstreetDataService.Model")]
    public enum OrderStatus : int {
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        OPEN = 0,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        PARTIAL = 1,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        DONE = 2,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        DELETED = 3,
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="OrderType", Namespace="http://schemas.datacontract.org/2004/07/WallstreetDataService.Model")]
    public enum OrderType : int {
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        BUY = 0,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        SELL = 1,
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="Transaction", Namespace="http://schemas.datacontract.org/2004/07/WallstreetDataService.Model")]
    [System.SerializableAttribute()]
    public partial class Transaction : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private long BrokerIdField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string BuyerIdField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string BuyingOrderIdField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int NoOfSharesSoldField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private double PricePerShareField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private double ProvisionField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string SellerIdField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string SellingOrderIdField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string ShareNameField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private double TotalCostField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string TransactionIdField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public long BrokerId {
            get {
                return this.BrokerIdField;
            }
            set {
                if ((this.BrokerIdField.Equals(value) != true)) {
                    this.BrokerIdField = value;
                    this.RaisePropertyChanged("BrokerId");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string BuyerId {
            get {
                return this.BuyerIdField;
            }
            set {
                if ((object.ReferenceEquals(this.BuyerIdField, value) != true)) {
                    this.BuyerIdField = value;
                    this.RaisePropertyChanged("BuyerId");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string BuyingOrderId {
            get {
                return this.BuyingOrderIdField;
            }
            set {
                if ((object.ReferenceEquals(this.BuyingOrderIdField, value) != true)) {
                    this.BuyingOrderIdField = value;
                    this.RaisePropertyChanged("BuyingOrderId");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int NoOfSharesSold {
            get {
                return this.NoOfSharesSoldField;
            }
            set {
                if ((this.NoOfSharesSoldField.Equals(value) != true)) {
                    this.NoOfSharesSoldField = value;
                    this.RaisePropertyChanged("NoOfSharesSold");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public double PricePerShare {
            get {
                return this.PricePerShareField;
            }
            set {
                if ((this.PricePerShareField.Equals(value) != true)) {
                    this.PricePerShareField = value;
                    this.RaisePropertyChanged("PricePerShare");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public double Provision {
            get {
                return this.ProvisionField;
            }
            set {
                if ((this.ProvisionField.Equals(value) != true)) {
                    this.ProvisionField = value;
                    this.RaisePropertyChanged("Provision");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string SellerId {
            get {
                return this.SellerIdField;
            }
            set {
                if ((object.ReferenceEquals(this.SellerIdField, value) != true)) {
                    this.SellerIdField = value;
                    this.RaisePropertyChanged("SellerId");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string SellingOrderId {
            get {
                return this.SellingOrderIdField;
            }
            set {
                if ((object.ReferenceEquals(this.SellingOrderIdField, value) != true)) {
                    this.SellingOrderIdField = value;
                    this.RaisePropertyChanged("SellingOrderId");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string ShareName {
            get {
                return this.ShareNameField;
            }
            set {
                if ((object.ReferenceEquals(this.ShareNameField, value) != true)) {
                    this.ShareNameField = value;
                    this.RaisePropertyChanged("ShareName");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public double TotalCost {
            get {
                return this.TotalCostField;
            }
            set {
                if ((this.TotalCostField.Equals(value) != true)) {
                    this.TotalCostField = value;
                    this.RaisePropertyChanged("TotalCost");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string TransactionId {
            get {
                return this.TransactionIdField;
            }
            set {
                if ((object.ReferenceEquals(this.TransactionIdField, value) != true)) {
                    this.TransactionIdField = value;
                    this.RaisePropertyChanged("TransactionId");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="Request", Namespace="http://schemas.datacontract.org/2004/07/WallstreetDataService.Model")]
    [System.SerializableAttribute()]
    public partial class Request : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string FirmNameField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private double PricePerShareField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int SharesField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string FirmName {
            get {
                return this.FirmNameField;
            }
            set {
                if ((object.ReferenceEquals(this.FirmNameField, value) != true)) {
                    this.FirmNameField = value;
                    this.RaisePropertyChanged("FirmName");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public double PricePerShare {
            get {
                return this.PricePerShareField;
            }
            set {
                if ((this.PricePerShareField.Equals(value) != true)) {
                    this.PricePerShareField = value;
                    this.RaisePropertyChanged("PricePerShare");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int Shares {
            get {
                return this.SharesField;
            }
            set {
                if ((this.SharesField.Equals(value) != true)) {
                    this.SharesField = value;
                    this.RaisePropertyChanged("Shares");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="FirmDepot", Namespace="http://schemas.datacontract.org/2004/07/WallstreetDataService.Model")]
    [System.SerializableAttribute()]
    public partial class FirmDepot : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string FirmNameField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int OwnedSharesField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string FirmName {
            get {
                return this.FirmNameField;
            }
            set {
                if ((object.ReferenceEquals(this.FirmNameField, value) != true)) {
                    this.FirmNameField = value;
                    this.RaisePropertyChanged("FirmName");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int OwnedShares {
            get {
                return this.OwnedSharesField;
            }
            set {
                if ((this.OwnedSharesField.Equals(value) != true)) {
                    this.OwnedSharesField = value;
                    this.RaisePropertyChanged("OwnedShares");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.ServiceContractAttribute(ConfigurationName="localhost.IWallstreetDataService", CallbackContract=typeof(BrokerService.localhost.IWallstreetDataServiceCallback))]
    public interface IWallstreetDataService {
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IWallstreetDataService/GetMarketInformation", ReplyAction="http://tempuri.org/IWallstreetDataService/GetMarketInformationResponse")]
        BrokerService.localhost.ShareInformation[] GetMarketInformation();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IWallstreetDataService/GetMarketInformation", ReplyAction="http://tempuri.org/IWallstreetDataService/GetMarketInformationResponse")]
        System.Threading.Tasks.Task<BrokerService.localhost.ShareInformation[]> GetMarketInformationAsync();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IWallstreetDataService/GetShareInformation", ReplyAction="http://tempuri.org/IWallstreetDataService/GetShareInformationResponse")]
        BrokerService.localhost.ShareInformation GetShareInformation(string shareName);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IWallstreetDataService/GetShareInformation", ReplyAction="http://tempuri.org/IWallstreetDataService/GetShareInformationResponse")]
        System.Threading.Tasks.Task<BrokerService.localhost.ShareInformation> GetShareInformationAsync(string shareName);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IWallstreetDataService/PutShareInformation", ReplyAction="http://tempuri.org/IWallstreetDataService/PutShareInformationResponse")]
        void PutShareInformation(BrokerService.localhost.ShareInformation info);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IWallstreetDataService/PutShareInformation", ReplyAction="http://tempuri.org/IWallstreetDataService/PutShareInformationResponse")]
        System.Threading.Tasks.Task PutShareInformationAsync(BrokerService.localhost.ShareInformation info);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IWallstreetDataService/GetOrders", ReplyAction="http://tempuri.org/IWallstreetDataService/GetOrdersResponse")]
        BrokerService.localhost.Order[] GetOrders();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IWallstreetDataService/GetOrders", ReplyAction="http://tempuri.org/IWallstreetDataService/GetOrdersResponse")]
        System.Threading.Tasks.Task<BrokerService.localhost.Order[]> GetOrdersAsync();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IWallstreetDataService/PutOrder", ReplyAction="http://tempuri.org/IWallstreetDataService/PutOrderResponse")]
        void PutOrder(BrokerService.localhost.Order order);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IWallstreetDataService/PutOrder", ReplyAction="http://tempuri.org/IWallstreetDataService/PutOrderResponse")]
        System.Threading.Tasks.Task PutOrderAsync(BrokerService.localhost.Order order);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IWallstreetDataService/GetTransactions", ReplyAction="http://tempuri.org/IWallstreetDataService/GetTransactionsResponse")]
        BrokerService.localhost.Transaction[] GetTransactions();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IWallstreetDataService/GetTransactions", ReplyAction="http://tempuri.org/IWallstreetDataService/GetTransactionsResponse")]
        System.Threading.Tasks.Task<BrokerService.localhost.Transaction[]> GetTransactionsAsync();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IWallstreetDataService/PutTransaction", ReplyAction="http://tempuri.org/IWallstreetDataService/PutTransactionResponse")]
        void PutTransaction(BrokerService.localhost.Transaction transaction);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IWallstreetDataService/PutTransaction", ReplyAction="http://tempuri.org/IWallstreetDataService/PutTransactionResponse")]
        System.Threading.Tasks.Task PutTransactionAsync(BrokerService.localhost.Transaction transaction);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IWallstreetDataService/RegisterFirm", ReplyAction="http://tempuri.org/IWallstreetDataService/RegisterFirmResponse")]
        BrokerService.localhost.FirmDepot RegisterFirm(BrokerService.localhost.Request request);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IWallstreetDataService/RegisterFirm", ReplyAction="http://tempuri.org/IWallstreetDataService/RegisterFirmResponse")]
        System.Threading.Tasks.Task<BrokerService.localhost.FirmDepot> RegisterFirmAsync(BrokerService.localhost.Request request);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IWallstreetDataService/GetFirmDepot", ReplyAction="http://tempuri.org/IWallstreetDataService/GetFirmDepotResponse")]
        BrokerService.localhost.FirmDepot GetFirmDepot(string firmName);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IWallstreetDataService/GetFirmDepot", ReplyAction="http://tempuri.org/IWallstreetDataService/GetFirmDepotResponse")]
        System.Threading.Tasks.Task<BrokerService.localhost.FirmDepot> GetFirmDepotAsync(string firmName);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IWallstreetDataService/SubscribeOnNewShareInformationAvailable" +
            "", ReplyAction="http://tempuri.org/IWallstreetDataService/SubscribeOnNewShareInformationAvailable" +
            "Response")]
        void SubscribeOnNewShareInformationAvailable();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IWallstreetDataService/SubscribeOnNewShareInformationAvailable" +
            "", ReplyAction="http://tempuri.org/IWallstreetDataService/SubscribeOnNewShareInformationAvailable" +
            "Response")]
        System.Threading.Tasks.Task SubscribeOnNewShareInformationAvailableAsync();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IWallstreetDataService/SubscribeOnNewOrderAvailable", ReplyAction="http://tempuri.org/IWallstreetDataService/SubscribeOnNewOrderAvailableResponse")]
        void SubscribeOnNewOrderAvailable();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IWallstreetDataService/SubscribeOnNewOrderAvailable", ReplyAction="http://tempuri.org/IWallstreetDataService/SubscribeOnNewOrderAvailableResponse")]
        System.Threading.Tasks.Task SubscribeOnNewOrderAvailableAsync();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IWallstreetDataService/SubscribeOnNewTransactionAvailable", ReplyAction="http://tempuri.org/IWallstreetDataService/SubscribeOnNewTransactionAvailableRespo" +
            "nse")]
        void SubscribeOnNewTransactionAvailable();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IWallstreetDataService/SubscribeOnNewTransactionAvailable", ReplyAction="http://tempuri.org/IWallstreetDataService/SubscribeOnNewTransactionAvailableRespo" +
            "nse")]
        System.Threading.Tasks.Task SubscribeOnNewTransactionAvailableAsync();
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public interface IWallstreetDataServiceCallback {
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="http://tempuri.org/IWallstreetDataService/OnNewShareInformationAvailable")]
        void OnNewShareInformationAvailable(BrokerService.localhost.ShareInformation info);
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="http://tempuri.org/IWallstreetDataService/OnNewOrderAvailable")]
        void OnNewOrderAvailable(BrokerService.localhost.Order order);
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="http://tempuri.org/IWallstreetDataService/OnNewTransactionAvailable")]
        void OnNewTransactionAvailable(BrokerService.localhost.Transaction transaction);
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public interface IWallstreetDataServiceChannel : BrokerService.localhost.IWallstreetDataService, System.ServiceModel.IClientChannel {
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class WallstreetDataServiceClient : System.ServiceModel.DuplexClientBase<BrokerService.localhost.IWallstreetDataService>, BrokerService.localhost.IWallstreetDataService {
        
        public WallstreetDataServiceClient(System.ServiceModel.InstanceContext callbackInstance) : 
                base(callbackInstance) {
        }
        
        public WallstreetDataServiceClient(System.ServiceModel.InstanceContext callbackInstance, string endpointConfigurationName) : 
                base(callbackInstance, endpointConfigurationName) {
        }
        
        public WallstreetDataServiceClient(System.ServiceModel.InstanceContext callbackInstance, string endpointConfigurationName, string remoteAddress) : 
                base(callbackInstance, endpointConfigurationName, remoteAddress) {
        }
        
        public WallstreetDataServiceClient(System.ServiceModel.InstanceContext callbackInstance, string endpointConfigurationName, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(callbackInstance, endpointConfigurationName, remoteAddress) {
        }
        
        public WallstreetDataServiceClient(System.ServiceModel.InstanceContext callbackInstance, System.ServiceModel.Channels.Binding binding, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(callbackInstance, binding, remoteAddress) {
        }
        
        public BrokerService.localhost.ShareInformation[] GetMarketInformation() {
            return base.Channel.GetMarketInformation();
        }
        
        public System.Threading.Tasks.Task<BrokerService.localhost.ShareInformation[]> GetMarketInformationAsync() {
            return base.Channel.GetMarketInformationAsync();
        }
        
        public BrokerService.localhost.ShareInformation GetShareInformation(string shareName) {
            return base.Channel.GetShareInformation(shareName);
        }
        
        public System.Threading.Tasks.Task<BrokerService.localhost.ShareInformation> GetShareInformationAsync(string shareName) {
            return base.Channel.GetShareInformationAsync(shareName);
        }
        
        public void PutShareInformation(BrokerService.localhost.ShareInformation info) {
            base.Channel.PutShareInformation(info);
        }
        
        public System.Threading.Tasks.Task PutShareInformationAsync(BrokerService.localhost.ShareInformation info) {
            return base.Channel.PutShareInformationAsync(info);
        }
        
        public BrokerService.localhost.Order[] GetOrders() {
            return base.Channel.GetOrders();
        }
        
        public System.Threading.Tasks.Task<BrokerService.localhost.Order[]> GetOrdersAsync() {
            return base.Channel.GetOrdersAsync();
        }
        
        public void PutOrder(BrokerService.localhost.Order order) {
            base.Channel.PutOrder(order);
        }
        
        public System.Threading.Tasks.Task PutOrderAsync(BrokerService.localhost.Order order) {
            return base.Channel.PutOrderAsync(order);
        }
        
        public BrokerService.localhost.Transaction[] GetTransactions() {
            return base.Channel.GetTransactions();
        }
        
        public System.Threading.Tasks.Task<BrokerService.localhost.Transaction[]> GetTransactionsAsync() {
            return base.Channel.GetTransactionsAsync();
        }
        
        public void PutTransaction(BrokerService.localhost.Transaction transaction) {
            base.Channel.PutTransaction(transaction);
        }
        
        public System.Threading.Tasks.Task PutTransactionAsync(BrokerService.localhost.Transaction transaction) {
            return base.Channel.PutTransactionAsync(transaction);
        }
        
        public BrokerService.localhost.FirmDepot RegisterFirm(BrokerService.localhost.Request request) {
            return base.Channel.RegisterFirm(request);
        }
        
        public System.Threading.Tasks.Task<BrokerService.localhost.FirmDepot> RegisterFirmAsync(BrokerService.localhost.Request request) {
            return base.Channel.RegisterFirmAsync(request);
        }
        
        public BrokerService.localhost.FirmDepot GetFirmDepot(string firmName) {
            return base.Channel.GetFirmDepot(firmName);
        }
        
        public System.Threading.Tasks.Task<BrokerService.localhost.FirmDepot> GetFirmDepotAsync(string firmName) {
            return base.Channel.GetFirmDepotAsync(firmName);
        }
        
        public void SubscribeOnNewShareInformationAvailable() {
            base.Channel.SubscribeOnNewShareInformationAvailable();
        }
        
        public System.Threading.Tasks.Task SubscribeOnNewShareInformationAvailableAsync() {
            return base.Channel.SubscribeOnNewShareInformationAvailableAsync();
        }
        
        public void SubscribeOnNewOrderAvailable() {
            base.Channel.SubscribeOnNewOrderAvailable();
        }
        
        public System.Threading.Tasks.Task SubscribeOnNewOrderAvailableAsync() {
            return base.Channel.SubscribeOnNewOrderAvailableAsync();
        }
        
        public void SubscribeOnNewTransactionAvailable() {
            base.Channel.SubscribeOnNewTransactionAvailable();
        }
        
        public System.Threading.Tasks.Task SubscribeOnNewTransactionAvailableAsync() {
            return base.Channel.SubscribeOnNewTransactionAvailableAsync();
        }
    }
}
